"""
Testes para o validator de s√∫mulas citadas v√°lidas.
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz do projeto ao PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.guardrails.guards import ValidSumulaReference


def test_valid_sumulas_in_range():
    """Testa s√∫mulas v√°lidas dentro do range."""
    print("\n" + "=" * 60)
    print("TESTE 1: S√∫mulas v√°lidas dentro do range")
    print("=" * 60)

    validator = ValidSumulaReference(min_sumula=1, max_sumula=200)

    response = """
    A S√∫mula 70 do TCEMG estabelece crit√©rios para contratos.
    Conforme a S√∫mula n¬∫ 112, os procedimentos licitat√≥rios
    devem seguir as normas da S√∫mula 85.
    """

    metadata = {
        "retrieved_sumulas": ["70", "112", "85"]
    }

    result = validator.validate(response, metadata)

    print(f"Resposta: {response[:100]}...")
    print(f"\nResultado: {result.outcome}")
    print(f"S√∫mulas citadas: {result.metadata.get('cited_sumulas')}")
    print(f"S√∫mulas inv√°lidas: {result.metadata.get('invalid_sumulas')}")
    print(f"Fora do range: {result.metadata.get('out_of_range_sumulas')}")

    assert result.outcome == "pass", "S√∫mulas v√°lidas deveriam passar"
    print("\n‚úÖ TESTE PASSOU")


def test_sumula_out_of_range():
    """Testa s√∫mula fora do range v√°lido."""
    print("\n" + "=" * 60)
    print("TESTE 2: S√∫mula fora do range")
    print("=" * 60)

    validator = ValidSumulaReference(min_sumula=1, max_sumula=200)

    response = """
    A S√∫mula 70 estabelece crit√©rios v√°lidos.
    A S√∫mula 999 determina procedimentos especiais.
    """

    metadata = {
        "retrieved_sumulas": ["70", "999"]
    }

    result = validator.validate(response, metadata)

    print(f"Resposta: {response[:100]}...")
    print(f"\nResultado: {result.outcome}")
    print(f"S√∫mulas citadas: {result.metadata.get('cited_sumulas')}")
    print(f"Fora do range: {result.metadata.get('out_of_range_sumulas')}")
    print(f"Erro: {result.error_message if hasattr(result, 'error_message') else 'None'}")

    assert result.outcome == "fail", "S√∫mula 999 est√° fora do range"
    assert "999" in result.metadata.get('out_of_range_sumulas', [])
    print("\n‚úÖ TESTE PASSOU - S√∫mula fora do range detectada")


def test_sumula_not_retrieved():
    """Testa s√∫mula citada mas n√£o recuperada."""
    print("\n" + "=" * 60)
    print("TESTE 3: S√∫mula citada mas n√£o recuperada")
    print("=" * 60)

    validator = ValidSumulaReference(min_sumula=1, max_sumula=200)

    response = """
    A S√∫mula 70 estabelece crit√©rios v√°lidos.
    A S√∫mula 150 tamb√©m trata do assunto.
    """

    metadata = {
        "retrieved_sumulas": ["70"]  # 150 n√£o foi recuperada
    }

    result = validator.validate(response, metadata)

    print(f"Resposta: {response[:100]}...")
    print(f"\nResultado: {result.outcome}")
    print(f"S√∫mulas citadas: {result.metadata.get('cited_sumulas')}")
    print(f"N√£o recuperadas: {result.metadata.get('not_retrieved_sumulas')}")
    print(f"Warning: {result.metadata.get('warning', 'None')}")

    # N√£o √© cr√≠tico, mas gera warning
    assert result.outcome == "pass", "Deveria passar mas com warning"
    assert "150" in result.metadata.get('not_retrieved_sumulas', [])
    print("\n‚úÖ TESTE PASSOU - Warning gerado corretamente")


def test_invalid_sumula_number():
    """Testa n√∫mero de s√∫mula inv√°lido."""
    print("\n" + "=" * 60)
    print("TESTE 4: N√∫mero de s√∫mula inv√°lido")
    print("=" * 60)

    validator = ValidSumulaReference(min_sumula=1, max_sumula=200)

    response = """
    A S√∫mula 0 n√£o deveria existir.
    A S√∫mula -5 tamb√©m √© inv√°lida.
    """

    metadata = {
        "retrieved_sumulas": ["0"]
    }

    result = validator.validate(response, metadata)

    print(f"Resposta: {response[:100]}...")
    print(f"\nResultado: {result.outcome}")
    print(f"S√∫mulas citadas: {result.metadata.get('cited_sumulas')}")
    print(f"Fora do range: {result.metadata.get('out_of_range_sumulas')}")

    assert result.outcome == "fail", "S√∫mula 0 √© inv√°lida"
    print("\n‚úÖ TESTE PASSOU - N√∫meros inv√°lidos detectados")


def test_incorrect_citation_format():
    """Testa formato de cita√ß√£o incorreto."""
    print("\n" + "=" * 60)
    print("TESTE 5: Formato de cita√ß√£o incorreto")
    print("=" * 60)

    validator = ValidSumulaReference(min_sumula=1, max_sumula=200)

    response = """
    A sumula 70 estabelece crit√©rios (sem acento).
    A S√∫mula numero 85 tamb√©m trata do assunto (formato incorreto).
    """

    metadata = {
        "retrieved_sumulas": ["70", "85"]
    }

    result = validator.validate(response, metadata)

    print(f"Resposta: {response[:100]}...")
    print(f"\nResultado: {result.outcome}")
    print(f"S√∫mulas citadas: {result.metadata.get('cited_sumulas')}")
    print(f"Issues de formato: {result.metadata.get('citation_format_issues')}")

    # Formato incorreto gera warning mas passa
    assert result.metadata.get('citation_format_issues'), "Deveria detectar formato incorreto"
    print(f"\n‚úÖ TESTE PASSOU - {len(result.metadata.get('citation_format_issues', []))} issues de formato detectados")


def test_no_sumulas_cited():
    """Testa resposta sem s√∫mulas citadas."""
    print("\n" + "=" * 60)
    print("TESTE 6: Resposta sem s√∫mulas citadas")
    print("=" * 60)

    validator = ValidSumulaReference(min_sumula=1, max_sumula=200)

    response = """
    Esta resposta n√£o menciona nenhuma s√∫mula espec√≠fica.
    Fala apenas sobre contratos e licita√ß√µes em geral.
    """

    metadata = {
        "retrieved_sumulas": ["70"]
    }

    result = validator.validate(response, metadata)

    print(f"Resposta: {response[:100]}...")
    print(f"\nResultado: {result.outcome}")
    print(f"S√∫mulas citadas: {result.metadata.get('cited_sumulas')}")
    print(f"Valida√ß√£o: {result.metadata.get('validation')}")

    assert result.outcome == "pass", "Sem s√∫mulas citadas, n√£o h√° o que validar"
    assert result.metadata.get('validation') == "no_sumulas_cited"
    print("\n‚úÖ TESTE PASSOU")


def test_with_valid_sumulas_list():
    """Testa com lista de s√∫mulas v√°lidas do sistema."""
    print("\n" + "=" * 60)
    print("TESTE 7: Verifica√ß√£o contra lista de s√∫mulas v√°lidas")
    print("=" * 60)

    validator = ValidSumulaReference(min_sumula=1, max_sumula=200)

    response = """
    A S√∫mula 70 estabelece crit√©rios v√°lidos.
    A S√∫mula 500 n√£o existe no sistema.
    """

    metadata = {
        "retrieved_sumulas": ["70"],
        "all_valid_sumulas": ["70", "85", "100", "112"]  # Lista de s√∫mulas que existem
    }

    result = validator.validate(response, metadata)

    print(f"Resposta: {response[:100]}...")
    print(f"\nResultado: {result.outcome}")
    print(f"S√∫mulas citadas: {result.metadata.get('cited_sumulas')}")
    print(f"S√∫mulas inv√°lidas: {result.metadata.get('invalid_sumulas')}")
    print(f"Erro: {result.error_message if hasattr(result, 'error_message') else 'None'}")

    # 500 est√° fora do range E n√£o existe na lista
    assert result.outcome == "fail"
    print("\n‚úÖ TESTE PASSOU - S√∫mula inexistente detectada")


def run_all_tests():
    """Executa todos os testes."""
    print("\n" + "=" * 60)
    print("üß™ TESTES DE VALIDA√á√ÉO DE S√öMULAS CITADAS")
    print("=" * 60)

    try:
        test_valid_sumulas_in_range()
        test_sumula_out_of_range()
        test_sumula_not_retrieved()
        test_invalid_sumula_number()
        test_incorrect_citation_format()
        test_no_sumulas_cited()
        test_with_valid_sumulas_list()

        print("\n" + "=" * 60)
        print("‚úÖ TODOS OS TESTES CONCLU√çDOS")
        print("=" * 60)
        return True

    except AssertionError as e:
        print(f"\n‚ùå TESTE FALHOU: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)
